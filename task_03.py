import networkx as nx
import matplotlib.pyplot as plt
import heapq # –î–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–æ—ó —á–µ—Ä–≥–∏
from typing import Dict, List, Tuple

def create_weighted_graph() -> nx.DiGraph:
    """
    –°—Ç–≤–æ—Ä—é—î –æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –∑–≤–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ –¥–ª—è –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ—ó –º–µ—Ä–µ–∂—ñ.

    Returns:
        nx.DiGraph: –û—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –≥—Ä–∞—Ñ —ñ–∑ –≤–∞–≥–∞–º–∏ —Ä–µ–±–µ—Ä.
    """
    DG = nx.DiGraph()

    # –í–µ—Ä—à–∏–Ω–∏ (–∑—É–ø–∏–Ω–∫–∏)
    places: List[str] = [
        "–î—ñ–º", "–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–±—É—Å—É", "—Å—Ç.–º. –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "–ó—É–ø–∏–Ω–∫–∞ —Ç—Ä–∞–º–≤–∞—é",
        "—Å—Ç.–º. –ü–æ–∑–Ω—è–∫–∏", "—Å—Ç.–º. –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", "—Å—Ç.–º. –ü–ª–æ—â–∞ –ì–µ—Ä–æ—ó–≤",
        "—Å—Ç.–º. –ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞", "—Å—Ç.–º. –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞", "—Å—Ç.–º. –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–†–æ–±–æ—Ç–∞"
    ]
    DG.add_nodes_from(places)

    # –†–µ–±—Ä–∞ (–º–∞—Ä—à—Ä—É—Ç–∏) –∑ –≤–∞–≥–∞–º–∏ (–≤—ñ–¥—Å—Ç–∞–Ω—è–º–∏)
    edges: List[Tuple[str, str, Dict[str, float]]] = [
        ("–î—ñ–º", "–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–±—É—Å—É", {"weight": 240}),
        ("–î—ñ–º", "–ó—É–ø–∏–Ω–∫–∞ —Ç—Ä–∞–º–≤–∞—é", {"weight": 470}),
        ("–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–±—É—Å—É", "—Å—Ç.–º. –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", {"weight": 4000}),
        ("–ó—É–ø–∏–Ω–∫–∞ —Ç—Ä–∞–º–≤–∞—é", "—Å—Ç.–º. –ü–æ–∑–Ω—è–∫–∏", {"weight": 1900}),
        ("—Å—Ç.–º. –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "—Å—Ç.–º. –ü–æ–∑–Ω—è–∫–∏", {"weight": 1200}),
        ("—Å—Ç.–º. –ü–æ–∑–Ω—è–∫–∏", "—Å—Ç.–º. –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", {"weight": 9400}),
        ("—Å—Ç.–º. –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", "–†–æ–±–æ—Ç–∞", {"weight": 2300}),
        ("—Å—Ç.–º. –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", "—Å—Ç.–º. –ü–ª–æ—â–∞ –ì–µ—Ä–æ—ó–≤", {"weight": 200}),
        ("—Å—Ç.–º. –ü–ª–æ—â–∞ –ì–µ—Ä–æ—ó–≤", "–†–æ–±–æ—Ç–∞", {"weight": 1000}),
        ("—Å—Ç.–º. –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", "—Å—Ç.–º. –ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞", {"weight": 1000}),
        ("—Å—Ç.–º. –ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞", "—Å—Ç.–º. –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞", {"weight": 200}),
        ("—Å—Ç.–º. –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞", "—Å—Ç.–º. –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", {"weight": 800}),
        ("—Å—Ç.–º. –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–†–æ–±–æ—Ç–∞", {"weight": 540})
    ]
    DG.add_edges_from(edges)
    
    return DG

def visualize_graph(graph: nx.DiGraph) -> None:
    """
    –í—ñ–∑—É–∞–ª—ñ–∑—É—î –æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –∑–≤–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ —ñ–∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º–∏ —Ä–µ–±—Ä–∞–º–∏ —Ç–∞ –≤–∞–≥–∞–º–∏.

    Args:
        graph (nx.DiGraph): –û—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –≥—Ä–∞—Ñ.
    """
    plt.figure(figsize=(12, 8))
    pos = nx.shell_layout(graph)

    # –ö–æ–ª—å–æ—Ä–∏ —Ä–µ–±–µ—Ä
    edge_colors = []
    for edge in graph.edges():
        if edge in [("–î—ñ–º", "–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–±—É—Å—É"), ("–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–±—É—Å—É", "—Å—Ç.–º. –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞"), 
                    ("—Å—Ç.–º. –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "—Å—Ç.–º. –ü–æ–∑–Ω—è–∫–∏"), ("—Å—Ç.–º. –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", "—Å—Ç.–º. –ü–ª–æ—â–∞ –ì–µ—Ä–æ—ó–≤"), 
                    ("—Å—Ç.–º. –ü–ª–æ—â–∞ –ì–µ—Ä–æ—ó–≤", "–†–æ–±–æ—Ç–∞")]:
            edge_colors.append('skyblue')
        elif edge in [("–î—ñ–º", "–ó—É–ø–∏–Ω–∫–∞ —Ç—Ä–∞–º–≤–∞—é"), ("–ó—É–ø–∏–Ω–∫–∞ —Ç—Ä–∞–º–≤–∞—é", "—Å—Ç.–º. –ü–æ–∑–Ω—è–∫–∏"), 
                      ("—Å—Ç.–º. –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", "—Å—Ç.–º. –ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞"), ("—Å—Ç.–º. –ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞", "—Å—Ç.–º. –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞"), 
                      ("—Å—Ç.–º. –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞", "—Å—Ç.–º. –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç"), ("—Å—Ç.–º. –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–†–æ–±–æ—Ç–∞")]:
            edge_colors.append('green')
        else:
            edge_colors.append('violet')

    # –ú–∞–ª—é—î–º–æ –≥—Ä–∞—Ñ —ñ–∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º–∏ —Ä–µ–±—Ä–∞–º–∏
    nx.draw(graph, pos, with_labels=True, node_color='yellow', node_size=3000, 
            font_size=10, arrows=True, edge_color=edge_colors)

    # –î–æ–¥–∞—î–º–æ –≤–∞–≥–∏ —Ä–µ–±–µ—Ä
    edge_labels = {(u, v): d["weight"] for u, v, d in graph.edges(data=True)}
    nx.draw_networkx_edge_labels(graph, pos, edge_labels=edge_labels, font_size=10, label_pos=0.5)

    plt.title("–ú—ñ–π —à–ª—è—Ö –Ω–∞ —Ä–æ–±–æ—Ç—É")
    plt.show()

def dijkstra(graph: nx.DiGraph, start: str) -> Dict[str, Tuple[float, List[str]]]:
    """
    –†–µ–∞–ª—ñ–∑—É—î –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä–∏ –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤ —É –≥—Ä–∞—Ñ—ñ.

    Args:
        graph (nx.DiGraph): –û—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –≥—Ä–∞—Ñ.
        start (str): –ü–æ—á–∞—Ç–∫–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞.

    Returns:
        Dict[str, Tuple[float, List[str]]]: –°–ª–æ–≤–Ω–∏–∫, –¥–µ –∫–ª—é—á ‚Äì –≤–µ—Ä—à–∏–Ω–∞, –∞ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äì –∫–æ—Ä—Ç–µ–∂ (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å, –º–∞—Ä—à—Ä—É—Ç).
    """
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–æ –≤—Å—ñ—Ö –≤–µ—Ä—à–∏–Ω —è–∫ "–Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω—ñ—Å—Ç—å"
    distances = {node: float('inf') for node in graph.nodes}
    distances[start] = 0  # –í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ—ó –≤–µ—Ä—à–∏–Ω–∏ = 0

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏ (—Å–ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–∞ –≤–µ—Ä—à–∏–Ω–∞ –º–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Ä—à—Ä—É—Ç)
    paths = {node: [] for node in graph.nodes}
    paths[start] = [start]  # –°—Ç–∞—Ä—Ç–æ–≤–∞ –≤–µ—Ä—à–∏–Ω–∞ —Å–∞–º–∞ —Å–æ–±—ñ –º–∞—Ä—à—Ä—É—Ç

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—É —á–µ—Ä–≥—É –¥–ª—è –≤–∏–±–æ—Ä—É –≤–µ—Ä—à–∏–Ω–∏ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é
    priority_queue = [(0, start)]  # (–≤—ñ–¥—Å—Ç–∞–Ω—å, –≤–µ—Ä—à–∏–Ω–∞)

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        # –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ —Å—É—Å—ñ–¥—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏
        for neighbor in graph.neighbors(current_node):
            weight = graph[current_node][neighbor]["weight"]
            distance = current_distance + weight

            # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –¥–æ —Å—É—Å—ñ–¥–∞ - –æ–Ω–æ–≤–ª—é—î–º–æ
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                paths[neighbor] = paths[current_node] + [neighbor]
                heapq.heappush(priority_queue, (distance, neighbor))

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –≤–∏–≥–ª—è–¥—ñ —Å–ª–æ–≤–Ω–∏–∫–∞ {–≤–µ—Ä—à–∏–Ω–∞: (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å, —à–ª—è—Ö)}
    return {node: (distances[node], paths[node]) for node in graph.nodes}

if __name__ == "__main__":
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ —ñ–∑ –≤–∞–≥–∞–º–∏
    graph = create_weighted_graph()
    
    # –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ –≥—Ä–∞—Ñ
    visualize_graph(graph)

    # –í–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤—É –≤–µ—Ä—à–∏–Ω—É
    start = "–î—ñ–º"

    # –í–∏–∫–æ–Ω—É—î–º–æ –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä–∏
    shortest_paths = dijkstra(graph, start)

    # –í–∏–≤–æ–¥–∏–º–æ –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –≤—ñ–¥ "–î—ñ–º" –¥–æ –≤—Å—ñ—Ö –≤–µ—Ä—à–∏–Ω
    print("\nüîç –ù–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –≤—ñ–¥ –≤–µ—Ä—à–∏–Ω–∏ '–î—ñ–º':")
    for node, (distance, path) in shortest_paths.items():
        print(f"üîπ –í—ñ–¥ '–î—ñ–º' –¥–æ '{node}': —à–ª—è—Ö = {path}, –≤—ñ–¥—Å—Ç–∞–Ω—å = {distance}")