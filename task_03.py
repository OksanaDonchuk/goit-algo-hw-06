import networkx as nx
import matplotlib.pyplot as plt
from typing import Dict, List, Tuple

def create_weighted_graph() -> nx.DiGraph:
    """
    –°—Ç–≤–æ—Ä—é—î –æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –∑–≤–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ –¥–ª—è –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ—ó –º–µ—Ä–µ–∂—ñ.

    Returns:
        nx.DiGraph: –û—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –≥—Ä–∞—Ñ —ñ–∑ –≤–∞–≥–∞–º–∏ —Ä–µ–±–µ—Ä.
    """
    DG = nx.DiGraph()

    # –í–µ—Ä—à–∏–Ω–∏ (–∑—É–ø–∏–Ω–∫–∏)
    places: List[str] = [
        "–î—ñ–º", "–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–±—É—Å—É", "—Å—Ç.–º. –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "–ó—É–ø–∏–Ω–∫–∞ —Ç—Ä–∞–º–≤–∞—é",
        "—Å—Ç.–º. –ü–æ–∑–Ω—è–∫–∏", "—Å—Ç.–º. –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", "—Å—Ç.–º. –ü–ª–æ—â–∞ –ì–µ—Ä–æ—ó–≤",
        "—Å—Ç.–º. –ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞", "—Å—Ç.–º. –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞", "—Å—Ç.–º. –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–†–æ–±–æ—Ç–∞"
    ]
    DG.add_nodes_from(places)

    # –†–µ–±—Ä–∞ (–º–∞—Ä—à—Ä—É—Ç–∏) –∑ –≤–∞–≥–∞–º–∏ (–≤—ñ–¥—Å—Ç–∞–Ω—è–º–∏)
    edges: List[Tuple[str, str, Dict[str, float]]] = [
        ("–î—ñ–º", "–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–±—É—Å—É", {"weight": 240}),
        ("–î—ñ–º", "–ó—É–ø–∏–Ω–∫–∞ —Ç—Ä–∞–º–≤–∞—é", {"weight": 470}),
        ("–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–±—É—Å—É", "—Å—Ç.–º. –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", {"weight": 4000}),
        ("–ó—É–ø–∏–Ω–∫–∞ —Ç—Ä–∞–º–≤–∞—é", "—Å—Ç.–º. –ü–æ–∑–Ω—è–∫–∏", {"weight": 1900}),
        ("—Å—Ç.–º. –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "—Å—Ç.–º. –ü–æ–∑–Ω—è–∫–∏", {"weight": 1200}),
        ("—Å—Ç.–º. –ü–æ–∑–Ω—è–∫–∏", "—Å—Ç.–º. –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", {"weight": 9400}),
        ("—Å—Ç.–º. –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", "–†–æ–±–æ—Ç–∞", {"weight": 2300}),
        ("—Å—Ç.–º. –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", "—Å—Ç.–º. –ü–ª–æ—â–∞ –ì–µ—Ä–æ—ó–≤", {"weight": 200}),
        ("—Å—Ç.–º. –ü–ª–æ—â–∞ –ì–µ—Ä–æ—ó–≤", "–†–æ–±–æ—Ç–∞", {"weight": 1000}),
        ("—Å—Ç.–º. –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", "—Å—Ç.–º. –ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞", {"weight": 1000}),
        ("—Å—Ç.–º. –ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞", "—Å—Ç.–º. –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞", {"weight": 200}),
        ("—Å—Ç.–º. –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞", "—Å—Ç.–º. –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", {"weight": 800}),
        ("—Å—Ç.–º. –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–†–æ–±–æ—Ç–∞", {"weight": 540})
    ]
    DG.add_edges_from(edges)
    
    return DG

def visualize_graph(graph: nx.DiGraph) -> None:
    """
    –í—ñ–∑—É–∞–ª—ñ–∑—É—î –æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –∑–≤–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ —ñ–∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º–∏ —Ä–µ–±—Ä–∞–º–∏ —Ç–∞ –≤–∞–≥–∞–º–∏.

    Args:
        graph (nx.DiGraph): –û—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –≥—Ä–∞—Ñ.
    """
    plt.figure(figsize=(12, 8))
    pos = nx.shell_layout(graph)

    # –ö–æ–ª—å–æ—Ä–∏ —Ä–µ–±–µ—Ä
    edge_colors = []
    for edge in graph.edges():
        if edge in [("–î—ñ–º", "–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–±—É—Å—É"), ("–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–±—É—Å—É", "—Å—Ç.–º. –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞"), 
                    ("—Å—Ç.–º. –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "—Å—Ç.–º. –ü–æ–∑–Ω—è–∫–∏"), ("—Å—Ç.–º. –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", "—Å—Ç.–º. –ü–ª–æ—â–∞ –ì–µ—Ä–æ—ó–≤"), 
                    ("—Å—Ç.–º. –ü–ª–æ—â–∞ –ì–µ—Ä–æ—ó–≤", "–†–æ–±–æ—Ç–∞")]:
            edge_colors.append('skyblue')
        elif edge in [("–î—ñ–º", "–ó—É–ø–∏–Ω–∫–∞ —Ç—Ä–∞–º–≤–∞—é"), ("–ó—É–ø–∏–Ω–∫–∞ —Ç—Ä–∞–º–≤–∞—é", "—Å—Ç.–º. –ü–æ–∑–Ω—è–∫–∏"), 
                      ("—Å—Ç.–º. –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", "—Å—Ç.–º. –ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞"), ("—Å—Ç.–º. –ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞", "—Å—Ç.–º. –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞"), 
                      ("—Å—Ç.–º. –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞", "—Å—Ç.–º. –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç"), ("—Å—Ç.–º. –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–†–æ–±–æ—Ç–∞")]:
            edge_colors.append('green')
        else:
            edge_colors.append('violet')

    # –ú–∞–ª—é—î–º–æ –≥—Ä–∞—Ñ —ñ–∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º–∏ —Ä–µ–±—Ä–∞–º–∏
    nx.draw(graph, pos, with_labels=True, node_color='yellow', node_size=3000, 
            font_size=10, arrows=True, edge_color=edge_colors)

    # –î–æ–¥–∞—î–º–æ –≤–∞–≥–∏ —Ä–µ–±–µ—Ä
    edge_labels = {(u, v): d["weight"] for u, v, d in graph.edges(data=True)}
    nx.draw_networkx_edge_labels(graph, pos, edge_labels=edge_labels, font_size=10, label_pos=0.5)

    plt.title("–ú—ñ–π —à–ª—è—Ö –Ω–∞ —Ä–æ–±–æ—Ç—É")
    plt.show()

def find_shortest_paths(graph: nx.DiGraph) -> Dict[str, Dict[str, Tuple[List[str], float]]]:
    """
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä–∏ –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤ –º—ñ–∂ —É—Å—ñ–º–∞ –≤–µ—Ä—à–∏–Ω–∞–º–∏.

    Args:
        graph (nx.DiGraph): –û—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –∑–≤–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ.

    Returns:
        Dict[str, Dict[str, Tuple[List[str], float]]]: –°–ª–æ–≤–Ω–∏–∫ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤ —Ç–∞ —ó—Ö–Ω—å–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –º—ñ–∂ —É—Å—ñ–º–∞ –≤–µ—Ä—à–∏–Ω–∞–º–∏.
    """
    shortest_paths: Dict[str, Dict[str, Tuple[List[str], float]]] = {}

    for source in graph.nodes:
        shortest_paths[source] = {}
        for target in graph.nodes:
            if source != target:
                try:
                    path = nx.dijkstra_path(graph, source=source, target=target)
                    distance = nx.dijkstra_path_length(graph, source=source, target=target)
                    shortest_paths[source][target] = (path, distance)
                except nx.NetworkXNoPath:
                    shortest_paths[source][target] = ([], float('inf'))  # –Ø–∫—â–æ —à–ª—è—Ö –Ω–µ —ñ—Å–Ω—É—î
    
    return shortest_paths

if __name__ == "__main__":
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ —ñ–∑ –≤–∞–≥–∞–º–∏
    graph = create_weighted_graph()
    
    # –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ –≥—Ä–∞—Ñ
    visualize_graph(graph)

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –≤—ñ–¥ —É—Å—ñ—Ö –≤–µ—Ä—à–∏–Ω
    shortest_paths = find_shortest_paths(graph)

    # –í–∏–≤–æ–¥–∏–º–æ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –≤—ñ–¥ "–î—ñ–º" –¥–æ "–†–æ–±–æ—Ç–∞"
    start, target = "–î—ñ–º", "–†–æ–±–æ—Ç–∞"
    if target in shortest_paths[start]:
        path, distance = shortest_paths[start][target]
        print(f"\n–ù–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –≤—ñ–¥ '{start}' –¥–æ '{target}': {path}")
        print(f"–í—ñ–¥—Å—Ç–∞–Ω—å: {distance}")
    else:
        print(f"–®–ª—è—Ö—É –≤—ñ–¥ '{start}' –¥–æ '{target}' –Ω–µ —ñ—Å–Ω—É—î.")

    # –í–∏–≤—ñ–¥ —É—Å—ñ—Ö –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤
    print("\n–ù–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –º—ñ–∂ —É—Å—ñ–º–∞ –≤–µ—Ä—à–∏–Ω–∞–º–∏:")
    for src, targets in shortest_paths.items():
        for dest, (path, dist) in targets.items():
            if path:
                print(f"üîπ –í—ñ–¥ {src} –¥–æ {dest}: {path}, –≤—ñ–¥—Å—Ç–∞–Ω—å = {dist}")