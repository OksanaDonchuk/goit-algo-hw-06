import networkx as nx
import matplotlib.pyplot as plt
from typing import List, Tuple

def create_graph() -> nx.DiGraph:
    """
    Створює орієнтований граф транспортної мережі на шляху від дома на роботу.

    Returns:
        nx.DiGraph: Орієнтований граф з вершинами (зупинками) та ребрами (шляхами між ними).
    """
    DG = nx.DiGraph()

    # Список вершин (зупинок)
    places: List[str] = [
        "Дім", "Зупинка автобусу", "ст.м. Харківська", "Зупинка трамваю",
        "ст.м. Позняки", "ст.м. Палац спорту", "ст.м. Площа Героїв",
        "ст.м. Золоті ворота", "ст.м. Театральна", "ст.м. Університет", "Робота"
    ]
    
    DG.add_nodes_from(places)

    # Список ребер (шляхів між зупинками)
    edges: List[Tuple[str, str]] = [
        ("Дім", "Зупинка автобусу"), ("Дім", "Зупинка трамваю"),
        ("Зупинка автобусу", "ст.м. Харківська"), ("Зупинка трамваю", "ст.м. Позняки"),
        ("ст.м. Харківська", "ст.м. Позняки"), ("ст.м. Позняки", "ст.м. Палац спорту"),
        ("ст.м. Палац спорту", "Робота"), ("ст.м. Палац спорту", "ст.м. Площа Героїв"),
        ("ст.м. Площа Героїв", "Робота"), ("ст.м. Палац спорту", "ст.м. Золоті ворота"),
        ("ст.м. Золоті ворота", "ст.м. Театральна"), ("ст.м. Театральна", "ст.м. Університет"),
        ("ст.м. Університет", "Робота")
    ]

    DG.add_edges_from(edges)
    return DG

def analyze_graph(DG: nx.DiGraph) -> None:
    """
    Аналізує основні характеристики графа: кількість вершин, кількість ребер, 
    вхідний та вихідний ступінь кожної вершини.

    Args:
        DG (nx.DiGraph): Орієнтований граф для аналізу.
    """
    print(f"Кількість вершин: {DG.number_of_nodes()}")
    print(f"Кількість ребер: {DG.number_of_edges()}")

    for node in DG.nodes:
        print(f"Вершина '{node}': in-degree = {DG.in_degree(node)}, out-degree = {DG.out_degree(node)}")

def visualize_graph(DG: nx.DiGraph) -> None:
    """
    Візуалізує граф із кольорами ребер.

    Args:
        DG (nx.DiGraph): Орієнтований граф для візуалізації.
    """
    edge_colors = []
    for edge in DG.edges():
        if edge in [("Дім", "Зупинка автобусу"), ("Зупинка автобусу", "ст.м. Харківська"), 
                    ("ст.м. Харківська", "ст.м. Позняки"), ("ст.м. Палац спорту", "ст.м. Площа Героїв"), 
                    ("ст.м. Площа Героїв", "Робота")]:
            edge_colors.append('skyblue')
        elif edge in [("Дім", "Зупинка трамваю"), ("Зупинка трамваю", "ст.м. Позняки"), 
                      ("ст.м. Палац спорту", "ст.м. Золоті ворота"), ("ст.м. Золоті ворота", "ст.м. Театральна"), 
                      ("ст.м. Театральна", "ст.м. Університет"), ("ст.м. Університет", "Робота")]:
            edge_colors.append('green')
        else:
            edge_colors.append('violet')

    plt.figure(figsize=(12, 8))
    pos = nx.shell_layout(DG)  # Оптимальне розташування для транспорту
    nx.draw(DG, pos, with_labels=True, edge_color=edge_colors, 
            node_color='yellow', node_size=3000, font_size=10, arrows=True)
    
    plt.title("Мій шлях на роботу")
    plt.show()

if __name__ == "__main__":
    # Створюємо граф
    graph = create_graph()
    
    # Аналізуємо граф
    analyze_graph(graph)
    
    # Візуалізуємо граф
    visualize_graph(graph)